{"version":3,"sources":["index.js"],"names":["ranks","incidents","validationSchema","yup","shape","rank","required","uppercase","oneOf","name","nric","length","matches","contact","min","max","platform","incident","location","date","time","reason","status","swabbed","initialValues","medication","certNo","formatFirstMessageContents","values","toUpperCase","dateArr","split","reverse","join","formatDate","MessageStr","formatFirstMessage","formatSecondMessage","hasMedication","formatSecondMessageContents","FormPage","className","onSubmit","console","log","render","errors","touched","htmlFor","as","value","map","component","type","id","readOnly","onClick","document","getElementById","select","execCommand","ReactDOM"],"mappings":"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","file":"static/js/main.651d7281.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport { Persist } from 'formik-persist'\r\nimport * as yup from 'yup';\r\n\r\nimport './index.css';\r\n\r\n\r\nconst ranks = ['REC', 'PTE', 'LCP', 'CPL', 'CFC', '3SG', 'ME1', 'ME2', 'ME3'];\r\nconst incidents = ['RSI', 'RSO', 'MA'];\r\n\r\nconst validationSchema = yup.object().shape({\r\n    rank: yup\r\n        .string()\r\n        .required('Rank is required')\r\n        .uppercase()\r\n        .oneOf(ranks),\r\n    name: yup\r\n        .string()\r\n        .required('Name is required'),\r\n    nric: yup\r\n        .string()\r\n        .required('Masked NRIC is required')\r\n        .length(9, 'Masked NRIC must be exactly 9 characters')\r\n        .uppercase()\r\n        .matches(/([ST])XXXX([0-9]{3})([A-Z])/, 'Ensure that your NRIC is masked (Example: TXXXX123A)'),\r\n    contact: yup\r\n        .number('Only numerical digits are allowed')\r\n        .required('Contact Number is required')\r\n        .min(80000000, 'Invalid Contact Number')\r\n        .max(99999999, 'Invalid Contact Number'),\r\n    platform: yup\r\n        .string()\r\n        .required('Platform is required'),\r\n    incident: yup\r\n        .string()\r\n        .required('Please select the type of incident')\r\n        .oneOf(incidents),\r\n    location: yup.string().required('Location is required'),\r\n    date: yup.date().required('Date is required'),\r\n    time: yup\r\n        .string()\r\n        .length(4, 'Please provide time in 24hr format')\r\n        .required('Time is required')\r\n        .matches(/([01][0-9]|2[0-3])([0-5][0-9])/, 'Please provide time in 24hr format'),\r\n    reason: yup.string().required('Reason is required'),\r\n    status: yup.string().required('Status is required'),\r\n    swabbed: yup.bool().required('Reason is required'),\r\n});\r\n\r\nconst initialValues = {\r\n    rank: \"\",\r\n    name: \"\",\r\n    nric: \"\",\r\n    contact: \"\",\r\n    platform: \"\",\r\n    incident: \"\",\r\n    location: \"\",\r\n    date: \"\",\r\n    time: \"\",\r\n    reason: \"\",\r\n    medication: \"\",\r\n    status: \"\",\r\n    certNo: \"\",\r\n    swabbed: \"\",\r\n};\r\n\r\nfunction formatDate(date) {\r\n    let dateArr = date.split('-');\r\n    dateArr = dateArr.reverse();\r\n    return dateArr.join('');\r\n}\r\n\r\nfunction formatFirstMessageContents(values) {\r\n    // This function generates the contents of the first message without the greeting and the \"for your update and information\"\r\n    const nric = values.nric.toUpperCase();\r\n    const rank = values.rank;\r\n    const name = values.name.toUpperCase();\r\n    const contact = values.contact;\r\n    const platform = values.platform.toUpperCase();\r\n    const incident = values.incident;\r\n    const location = values.location.toUpperCase();\r\n    const date = formatDate(values.date);\r\n    const time = values.time;\r\n    const reason = values.reason.toUpperCase();\r\n\r\n    let MessageStr = `*<< ${nric} / ${rank} ${name} / ${contact} >>* from << *${platform}* >> is ${incident} at << *${location}* >> `;\r\n    MessageStr += `on << *${date} ${time}* >> for << *${reason}* >>. \\n\\n`;\r\n\r\n    return MessageStr;\r\n}\r\n\r\nfunction formatSecondMessageContents(values) {\r\n    // This function generates the contents for the outcome paragraph.\r\n    const rank = values.rank;\r\n    const name = values.name.toUpperCase();\r\n    const hasMedication = values.medication;\r\n    const status = values.status;\r\n    const certNo = values.certNo.toUpperCase();\r\n    const swabbed = values.swabbed;\r\n\r\n    let MessageStr = `*${rank} ${name}* has been prescribed with << *${hasMedication}* >> and given << *${status}* >>. \\n`;\r\n    MessageStr += `MC Number: ${certNo} \\n`;\r\n    MessageStr += `Swab Test: *${swabbed}*\\n\\n`;\r\n\r\n    return MessageStr;\r\n}\r\n\r\nfunction formatFirstMessage(values) {\r\n    let MessageStr = \"Dear Sirs/Ma'am,\\n\\n\";\r\n    MessageStr += formatFirstMessageContents(values);\r\n    MessageStr += `For your update and information.\\n`;\r\n\r\n    return MessageStr;\r\n}\r\n\r\nfunction formatSecondMessage(values) {\r\n    let MessageStr = \"Dear Sirs/Ma'am,\\n\\n\";\r\n    MessageStr += formatFirstMessageContents(values);\r\n    MessageStr += formatSecondMessageContents(values);\r\n    MessageStr += `For your update and information.\\n`;\r\n\r\n    return MessageStr;\r\n}\r\n\r\n\r\nfunction FormPage() {\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"text-center mt-2\">RSI/RSO/MA Format Generator</h1>\r\n\r\n            <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={values => {console.log(values)}}\r\n                render={({ errors, touched, values}) => (\r\n                    <Form>\r\n                        <Persist name=\"form\" />\r\n                        <h3 className=\"mb-0\">Personal Particulars</h3>\r\n                        <hr className=\"mt-1\" />\r\n\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-12 col-md-3 col-lg-2\">\r\n                                <label htmlFor=\"rank\">Rank</label>\r\n                                <Field name=\"rank\" as=\"select\" className=\"form-control\">\r\n                                    <option value=\"\"></option>\r\n                                    {ranks.map(rank => {\r\n                                        return <option value={rank}>{rank}</option>\r\n                                    })}\r\n                                </Field>\r\n                                <ErrorMessage name=\"rank\" component=\"div\" className=\"field-error\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12 col-md-9 col-lg-6\">\r\n                                <label htmlFor=\"name\">Name</label>\r\n                                <Field name=\"name\" type=\"text\" className={`form-control ${errors.name && touched.name ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"name\" component=\"div\" className=\"field-error\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12 col-md-6 col-lg-4\">\r\n                                <label htmlFor=\"nric\">Masked NRIC</label>\r\n                                <Field name=\"nric\" type=\"text\"\r\n                                       className={`form-control ${errors.nric && touched.nric ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"nric\" component=\"div\" className=\"field-error\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12 col-md-6\">\r\n                                <label htmlFor=\"contact\">Contact Number</label>\r\n                                <Field name=\"contact\" type=\"number\" className={`form-control ${errors.contact && touched.contact ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"contact\" component=\"div\" className=\"field-error\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12 col-md-6\">\r\n                                <label htmlFor=\"platform\">Platform</label>\r\n                                <Field name=\"platform\" type=\"text\" className={`form-control ${errors.platform && touched.platform ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"platform\" component=\"div\" className=\"field-error\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <h3 className=\"mt-3 mb-0\">Incident Details</h3>\r\n                        <hr className=\"mt-1\" />\r\n\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-12\">\r\n                                <p className=\"mb-0\">You are going to:</p>\r\n                                {incidents.map(incident => {\r\n                                    return (\r\n                                        <div className=\"\">\r\n                                            <label htmlFor={`incident_${incident}`} className=\"mb-0\">\r\n                                                <Field type=\"radio\" name=\"incident\" id={incident} value={incident} className=\"mr-3\"/>\r\n                                                {incident}\r\n                                            </label>\r\n                                        </div>\r\n\r\n                                    )\r\n                                })}\r\n                                <ErrorMessage name=\"incident\" component=\"div\" className=\"field-error\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12\">\r\n                                <label htmlFor=\"location\">Location</label>\r\n                                <Field name=\"location\" type=\"text\" className={`form-control ${errors.location && touched.location ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"location\" component=\"div\" className=\"field-error mb-0\" />\r\n                                <small className=\"form-text text-muted mt-0\">Put location as \"KMC\" if you are going to RSI.</small>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12 col-md-6\">\r\n                                <label htmlFor=\"date\">Date</label>\r\n                                <Field name=\"date\" type=\"date\" className={`form-control ${errors.date && touched.date ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"date\" component=\"div\" className=\"field-error mb-0\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12 col-md-6\">\r\n                                <label htmlFor=\"time\">Time</label>\r\n                                <Field name=\"time\" type=\"text\" className={`form-control ${errors.time && touched.time ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"time\" component=\"div\" className=\"field-error mb-0\" />\r\n                                <small className=\"form-text text-muted mt-0\">Enter time in 24-hour format (Example: 2330 or 0800)</small>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12\">\r\n                                <label htmlFor=\"reason\">Reason</label>\r\n                                <Field name=\"reason\" type=\"text\" className={`form-control ${errors.reason && touched.reason ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"reason\" component=\"div\" className=\"field-error mb-0\" />\r\n                                <small className=\"form-text text-muted mt-0\">\r\n                                    If you are reporting sick for fever, include the temperature as well (Example: Fever of 38.2)\r\n                                    <br />Note that flu is not a symptom.\r\n                                </small>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-row\">\r\n                            <p className=\"mb-0\">Your 1st Message:</p>\r\n                            <Field id=\"first-message\" as=\"textarea\" readOnly className=\"form-control mb-2\" value={formatFirstMessage(values)} />\r\n                            <button onClick={() => {\r\n                                const element = document.getElementById(\"first-message\");\r\n                                element.select();\r\n                                document.execCommand(\"copy\");\r\n                            }} className=\"btn btn-dark\">\r\n                                Copy Message\r\n                            </button>\r\n                        </div>\r\n\r\n                        <h3 className=\"mt-3 mb-0\">Outcome</h3>\r\n                        <small className=\"form-text text-muted mt-0\">Fill up this section after you have seen the doctor.</small>\r\n                        <hr className=\"mt-1\" />\r\n\r\n                        <div className=\"form-row\">\r\n                            <div className=\"col-12\">\r\n                                <p className=\"mb-0\">Did you obtain any medications from the doctor?</p>\r\n                                <label htmlFor='medication-yes' className=\"mb-0\">\r\n                                    <Field type=\"radio\" name=\"medication\" id=\"medication-yes\" value=\"Medication\" className=\"mr-1\"/>\r\n                                    Yes\r\n                                </label>\r\n                                <label htmlFor=\"medication-no\" className=\"mb-0 ml-3\">\r\n                                    <Field type=\"radio\" name=\"medication\" id=\"medication-no\" value=\"NIL\" className=\"mr-1\"/>\r\n                                    No\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"form-row mt-3\">\r\n                            <div className=\"form-group col-12\">\r\n                                <label htmlFor=\"status\">Status</label>\r\n                                <Field name=\"status\" type=\"text\" className={`form-control ${errors.status && touched.status ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"status\" component=\"div\" className=\"field-error mb-0\" />\r\n                                <small className=\"form-text text-muted mt-0\">\r\n                                    Format for status: MC for X days from DDMMYYYY to DDMMYYYY<br />\r\n                                    If you did not get any status, put \"NIL\".\r\n                                </small>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12\">\r\n                                <label htmlFor=\"certNo\">MC Number</label>\r\n                                <Field name=\"certNo\" type=\"text\" className={`form-control ${errors.certNo && touched.certNo ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"certNo\" component=\"div\" className=\"field-error mb-0\" />\r\n                                <small className=\"form-text text-muted mt-0\">\r\n                                    If you did not get any MC, put \"NIL\".\r\n                                </small>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12\">\r\n                                <p className=\"mb-0\">Did you go through a swab test?</p>\r\n                                <label htmlFor='swabbed-yes' className=\"mb-0\">\r\n                                    <Field type=\"radio\" name=\"swabbed\" id=\"swabbed-yes\" value=\"Yes\" className=\"mr-1\"/>\r\n                                    Yes\r\n                                </label>\r\n                                <label htmlFor=\"swabbed-no\" className=\"mb-0 ml-3\">\r\n                                    <Field type=\"radio\" name=\"swabbed\" id=\"swabbed-no\" value=\"No\" className=\"mr-1\"/>\r\n                                    No\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-row\">\r\n                            <p className=\"mb-0\">Your 2nd Message:</p>\r\n                            <Field id=\"second-message\" as=\"textarea\" readOnly className=\"form-control mb-2\" value={formatSecondMessage(values)} />\r\n                            <button onClick={() => {\r\n                                const element = document.getElementById(\"second-message\");\r\n                                element.select();\r\n                                document.execCommand(\"copy\");\r\n                            }} className=\"btn btn-dark\">\r\n                                Copy Message\r\n                            </button>\r\n                        </div>\r\n\r\n                    </Form>\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nReactDOM.render(\r\n    <FormPage />,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}