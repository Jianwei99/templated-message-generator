{"version":3,"sources":["index.js"],"names":["ranks","incidents","validationSchema","yup","shape","rank","required","uppercase","oneOf","name","nric","length","matches","contact","min","max","platform","incident","location","date","time","reason","hasStatus","statuses","of","excuse","duration","startDate","swabbed","certNo","medication","initialValues","formatFirstMessageContents","values","toUpperCase","parseISO","dateStr","lightFormat","err","MessageStr","formatSecondMessageContents","hasMedication","status","messageStr","forEach","item","index","endDate","addDays","push","join","formatStatusContents","formatFirstMessage","formatSecondMessage","FormPage","className","onSubmit","console","log","render","errors","touched","isValid","dirty","htmlFor","as","value","map","component","type","id","readOnly","onClick","document","getElementById","select","execCommand","insert","remove","ReactDOM"],"mappings":"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","file":"static/js/main.f557e144.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Formik, Field, Form, ErrorMessage, FieldArray } from 'formik';\r\nimport { Persist } from 'formik-persist'\r\nimport * as yup from 'yup';\r\nimport parseISO from 'date-fns/parseISO';\r\nimport addDays from 'date-fns/addDays';\r\nimport lightFormat from 'date-fns/lightFormat';\r\n\r\nimport './index.css';\r\n\r\n\r\nconst ranks = ['REC', 'PTE', 'LCP', 'CPL', 'CFC', '3SG', 'ME1', 'ME2', 'ME3'];\r\nconst incidents = ['RSI', 'RSO', 'MA'];\r\n\r\nconst validationSchema = yup.object().shape({\r\n    rank: yup\r\n        .string()\r\n        .required('Rank is required')\r\n        .uppercase()\r\n        .oneOf(ranks),\r\n    name: yup\r\n        .string()\r\n        .required('Name is required'),\r\n    nric: yup\r\n        .string()\r\n        .required('Masked NRIC is required')\r\n        .length(9, 'Masked NRIC must be exactly 9 characters')\r\n        .uppercase()\r\n        .matches(/([ST])XXXX([0-9]{3})([A-Z])/, 'Ensure that your NRIC is masked (Example: TXXXX123A)'),\r\n    contact: yup\r\n        .number('Only numerical digits are allowed')\r\n        .required('Contact Number is required')\r\n        .min(80000000, 'Invalid Contact Number')\r\n        .max(99999999, 'Invalid Contact Number'),\r\n    platform: yup\r\n        .string()\r\n        .required('Platform is required'),\r\n    incident: yup\r\n        .string()\r\n        .required('Please select the type of incident')\r\n        .oneOf(incidents),\r\n    location: yup.string().required('Location is required'),\r\n    date: yup.date().required('Date is required'),\r\n    time: yup\r\n        .string()\r\n        .length(4, 'Please provide time in 24hr format')\r\n        .required('Time is required')\r\n        .matches(/([01][0-9]|2[0-3])([0-5][0-9])/, 'Please provide time in 24hr format'),\r\n    reason: yup.string().required('Reason is required'),\r\n    hasStatus: yup.string().required('Please state if the doctor has given you any statuses').oneOf(['Yes', 'No']),\r\n    statuses: yup\r\n        .array()\r\n        .of(\r\n            yup.object().shape({\r\n                excuse: yup.string().required('Excuse is required'),\r\n                duration: yup.number('Only numerical digits are allowed').required('Duration in days is required').min(1, 'Duration should be 1 day or more'),\r\n                startDate: yup.date().required('Status starting date is required'),\r\n            })\r\n        ),\r\n    swabbed: yup.string().required('Please state if you have done a swab test').oneOf(['Yes', 'No']),\r\n    certNo: yup.string().required('MC No. or NIL is required'),\r\n    medication: yup.string().required('Please state if the doctor has given you any medications').oneOf(['Yes', 'No']),\r\n});\r\n\r\nconst initialValues = {\r\n    rank: \"\",\r\n    name: \"\",\r\n    nric: \"\",\r\n    contact: \"\",\r\n    platform: \"\",\r\n    incident: \"\",\r\n    location: \"\",\r\n    date: \"\",\r\n    time: \"\",\r\n    reason: \"\",\r\n    medication: \"\",\r\n    hasStatus: \"\",\r\n    statuses: [\r\n        {\r\n            excuse: \"\",\r\n            duration: \"\",\r\n            startDate: \"\",\r\n        },  // if changes to this variable is made, remember to edit below\r\n    ],\r\n    certNo: \"\",\r\n    swabbed: \"\",\r\n};\r\n\r\nfunction formatStatusContents(values) {\r\n    // This function generates the message body for all the statuses that is provided.\r\n    const statuses = values.statuses;\r\n    let messageStr = [];\r\n\r\n    statuses.forEach(function (item, index) {\r\n        const status = item.excuse.toUpperCase();\r\n        const duration = item.duration;\r\n        const startDate = parseISO(item.startDate);\r\n\r\n        try {\r\n            const endDate = addDays(startDate, duration - 1);\r\n            messageStr.push(`${status} for ${duration} ${duration > 1 ? \"days\" : \"day\"} from ${lightFormat(startDate, \"ddMMyyyy\")} to ${lightFormat(endDate, \"ddMMyyyy\")}`);\r\n        } catch (err) {\r\n            // RangeError occurs when date field is not filled, since date would be invalid\r\n            // temporarily set as empty string first\r\n        }\r\n    })\r\n\r\n    return messageStr.join(', ');\r\n}\r\n\r\nfunction formatFirstMessageContents(values) {\r\n    // This function generates the contents of the first message without the greeting and the \"for your update and information\"\r\n    const nric = values.nric.toUpperCase();\r\n    const rank = values.rank;\r\n    const name = values.name.toUpperCase();\r\n    const contact = values.contact;\r\n    const platform = values.platform.toUpperCase();\r\n    const incident = values.incident;\r\n    const location = values.location.toUpperCase();\r\n    const date = parseISO(values.date);\r\n    let dateStr = \"\";\r\n    try {\r\n        dateStr = lightFormat(date, \"ddMMyyyy\");\r\n    } catch (err) {\r\n        // RangeError occurs when date field is not filled, since date would be invalid\r\n        // temporarily set as empty string first\r\n        dateStr = \"\";\r\n    }\r\n\r\n    const time = values.time;\r\n    const reason = values.reason.toUpperCase();\r\n\r\n    let MessageStr = `*<< ${nric} / ${rank} ${name} / ${contact} >>* from << *${platform}* >> is ${incident} at << *${location}* >> `;\r\n    MessageStr += `on << *${dateStr} ${time}* >> for << *${reason}* >>. \\n\\n`;\r\n\r\n    return MessageStr;\r\n}\r\n\r\nfunction formatSecondMessageContents(values) {\r\n    // This function generates the contents for the outcome paragraph.\r\n    const rank = values.rank;\r\n    const name = values.name.toUpperCase();\r\n    const hasMedication = values.medication;\r\n    const hasStatus = values.hasStatus;\r\n    const status = hasStatus === \"Yes\" ? formatStatusContents(values) : \"NIL\";\r\n    const certNo = values.certNo.toUpperCase();\r\n    const swabbed = values.swabbed;\r\n\r\n    let MessageStr = `*${rank} ${name}* has been prescribed with << *${hasMedication}* >> and given << *${status}* >>. \\n`;\r\n    MessageStr += `MC Number: ${certNo} \\n`;\r\n    MessageStr += `Swab Test: *${swabbed}*\\n\\n`;\r\n\r\n    return MessageStr;\r\n}\r\n\r\nfunction formatFirstMessage(values) {\r\n    let MessageStr = \"Dear Sirs/Ma'am,\\n\\n\";\r\n    MessageStr += formatFirstMessageContents(values);\r\n    MessageStr += `For your update and information.`;\r\n\r\n    return MessageStr;\r\n}\r\n\r\nfunction formatSecondMessage(values) {\r\n    let MessageStr = \"Dear Sirs/Ma'am,\\n\\n\";\r\n    MessageStr += formatFirstMessageContents(values);\r\n    MessageStr += formatSecondMessageContents(values);\r\n    MessageStr += `For your update and information.`;\r\n\r\n    return MessageStr;\r\n}\r\n\r\nfunction FormPage() {\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"text-center mt-2\">RSI/RSO/MA Format Generator</h1>\r\n\r\n            <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={values => {console.log(values)}}\r\n                render={({ errors, touched, values, isValid, dirty}) => (\r\n                    <Form>\r\n                        <Persist name=\"form\" />\r\n                        <h3 className=\"mb-0\">Personal Particulars</h3>\r\n                        <hr className=\"mt-1\" />\r\n\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-12 col-md-3 col-lg-2\">\r\n                                <label htmlFor=\"rank\">Rank</label>\r\n                                <Field name=\"rank\" as=\"select\" className=\"form-control\">\r\n                                    <option value=\"\"></option>\r\n                                    {ranks.map(rank => {\r\n                                        return <option value={rank}>{rank}</option>\r\n                                    })}\r\n                                </Field>\r\n                                <ErrorMessage name=\"rank\" component=\"div\" className=\"field-error\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12 col-md-9 col-lg-6\">\r\n                                <label htmlFor=\"name\">Name</label>\r\n                                <Field name=\"name\" type=\"text\" className={`form-control ${errors.name && touched.name ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"name\" component=\"div\" className=\"field-error\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12 col-md-6 col-lg-4\">\r\n                                <label htmlFor=\"nric\">Masked NRIC</label>\r\n                                <Field name=\"nric\" type=\"text\"\r\n                                       className={`form-control ${errors.nric && touched.nric ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"nric\" component=\"div\" className=\"field-error\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12 col-md-6\">\r\n                                <label htmlFor=\"contact\">Contact Number</label>\r\n                                <Field name=\"contact\" type=\"number\" className={`form-control ${errors.contact && touched.contact ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"contact\" component=\"div\" className=\"field-error\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12 col-md-6\">\r\n                                <label htmlFor=\"platform\">Platform</label>\r\n                                <Field name=\"platform\" type=\"text\" className={`form-control ${errors.platform && touched.platform ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"platform\" component=\"div\" className=\"field-error\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <h3 className=\"mt-3 mb-0\">Incident Details</h3>\r\n                        <hr className=\"mt-1\" />\r\n\r\n                        <div className=\"form-row\">\r\n                            <div className=\"form-group col-12\">\r\n                                <p className=\"mb-0\">You are going to:</p>\r\n                                {incidents.map(incident => {\r\n                                    return (\r\n                                        <div className=\"\">\r\n                                            <label htmlFor={`incident_${incident}`} className=\"mb-0\">\r\n                                                <Field type=\"radio\" name=\"incident\" id={incident} value={incident} className=\"mr-3\"/>\r\n                                                {incident}\r\n                                            </label>\r\n                                        </div>\r\n\r\n                                    )\r\n                                })}\r\n                                <ErrorMessage name=\"incident\" component=\"div\" className=\"field-error\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12\">\r\n                                <label htmlFor=\"location\">Location</label>\r\n                                <Field name=\"location\" type=\"text\" className={`form-control ${errors.location && touched.location ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"location\" component=\"div\" className=\"field-error mb-0\" />\r\n                                <small className=\"form-text text-muted mt-0\">Put location as \"KMC\" if you are going to RSI.</small>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12 col-md-6\">\r\n                                <label htmlFor=\"date\">Date</label>\r\n                                <Field name=\"date\" type=\"date\" className={`form-control ${errors.date && touched.date ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"date\" component=\"div\" className=\"field-error mb-0\" />\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12 col-md-6\">\r\n                                <label htmlFor=\"time\">Time</label>\r\n                                <Field name=\"time\" type=\"text\" className={`form-control ${errors.time && touched.time ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"time\" component=\"div\" className=\"field-error mb-0\" />\r\n                                <small className=\"form-text text-muted mt-0\">Enter time in 24-hour format (Example: 2330 or 0800)</small>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12\">\r\n                                <label htmlFor=\"reason\">Reason</label>\r\n                                <Field name=\"reason\" type=\"text\" className={`form-control ${errors.reason && touched.reason ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"reason\" component=\"div\" className=\"field-error mb-0\" />\r\n                                <small className=\"form-text text-muted mt-0\">\r\n                                    If you are reporting sick for fever, include the temperature as well (Example: Fever of 38.2)\r\n                                    <br />Note that flu is not a symptom.\r\n                                </small>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-row\">\r\n                            <p className=\"mb-0\">Your 1st Message:</p>\r\n                            <Field id=\"first-message\" as=\"textarea\" readOnly className=\"form-control mb-2\" value={formatFirstMessage(values)} />\r\n                            <button onClick={() => {\r\n                                const element = document.getElementById(\"first-message\");\r\n                                element.select();\r\n                                document.execCommand(\"copy\");\r\n                            }} className=\"btn btn-dark\">\r\n                                Copy Message\r\n                            </button>\r\n                        </div>\r\n\r\n                        <h3 className=\"mt-3 mb-0\">Outcome</h3>\r\n                        <small className=\"form-text text-muted mt-0\">Fill up this section after you have seen the doctor.</small>\r\n                        <hr className=\"mt-1\" />\r\n\r\n                        <div className=\"form-row\">\r\n                            <div className=\"col-12\">\r\n                                <p className=\"mb-0\">Did you obtain any medications from the doctor?</p>\r\n                                <label htmlFor='medication-yes' className=\"mb-0\">\r\n                                    <Field type=\"radio\" name=\"medication\" id=\"medication-yes\" value=\"Medication\" className=\"mr-1\"/>\r\n                                    Yes\r\n                                </label>\r\n                                <label htmlFor=\"medication-no\" className=\"mb-0 ml-3\">\r\n                                    <Field type=\"radio\" name=\"medication\" id=\"medication-no\" value=\"NIL\" className=\"mr-1\"/>\r\n                                    No\r\n                                </label>\r\n                                <ErrorMessage name=\"medication\" component=\"div\" className=\"field-error mb-0\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-row mt-3\">\r\n                            <div className=\"col-12\">\r\n                                <p className=\"mb-0\">Did you obtain any statuses from the doctor?</p>\r\n                                <label htmlFor='hasStatus-yes' className=\"mb-0\">\r\n                                    <Field type=\"radio\" name=\"hasStatus\" id=\"hasStatus-yes\" value=\"Yes\" className=\"mr-1\"/>\r\n                                    Yes\r\n                                </label>\r\n                                <label htmlFor=\"hasStatus-no\" className=\"mb-0 ml-3\">\r\n                                    <Field type=\"radio\" name=\"hasStatus\" id=\"hasStatus-no\" value=\"No\" className=\"mr-1\"/>\r\n                                    No\r\n                                </label>\r\n                                <ErrorMessage name=\"hasStatus\" component=\"div\" className=\"field-error\" />\r\n                            </div>\r\n\r\n                            { values.hasStatus === \"Yes\" && (\r\n                                <div className=\"col-12 mt-3\">\r\n                                    <label htmlFor=\"status\">Statuses</label>\r\n                                    <FieldArray name=\"statuses\">\r\n                                        {({ insert, remove, push }) => (\r\n                                            <div>\r\n                                                { values.statuses.length > 0  &&\r\n                                                values.statuses.map((status, index) => (\r\n                                                    <div className=\"form-row mb-3\" key={index}>\r\n                                                        <div className=\"col-12 col-md-4 col-lg-5\">\r\n                                                            <label htmlFor={`statuses.${index}.excuse`}>Status</label>\r\n                                                            <Field name={`statuses.${index}.excuse`} type=\"text\"\r\n                                                                   className={`form-control ${(errors.statuses && errors.statuses[index] && errors.statuses[index].excuse) ? 'invalid-field' : 'valid-field'}`}\r\n                                                            />\r\n                                                            <ErrorMessage name={`statuses.${index}.excuse`} component=\"div\" className=\"field-error mb-0\" />\r\n                                                        </div>\r\n\r\n                                                        <div className=\"col-12 mt-2 mt-md-0 col-md-2\">\r\n                                                            <label htmlFor={`statuses.${index}.duration`}>No. of days</label>\r\n                                                            <Field name={`statuses.${index}.duration`} type=\"number\"\r\n                                                                   className={`form-control ${(errors.statuses && errors.statuses[index] && errors.statuses[index].duration) ? 'invalid-field' : 'valid-field'}`}\r\n                                                            />\r\n                                                            <ErrorMessage name={`statuses.${index}.duration`} component=\"div\" className=\"field-error mb-0\" />\r\n                                                        </div>\r\n\r\n                                                        <div className=\"col-12 mt-2 mt-md-0 col-md-3 col-lg-2\">\r\n                                                            <label htmlFor={`statuses.${index}.startDate`}>Starting Date</label>\r\n                                                            <Field name={`statuses.${index}.startDate`} type=\"date\"\r\n                                                                   className={`form-control ${(errors.statuses && errors.statuses[index] && errors.statuses[index].startDate) ? 'invalid-field' : 'valid-field'}`}\r\n                                                            />\r\n                                                            <ErrorMessage name={`statuses.${index}.startDate`} component=\"div\" className=\"field-error mb-0\" />\r\n                                                        </div>\r\n\r\n                                                        <div className=\"col-12 mt-2 mt-md-auto col-md-3 col-lg-2 d-flex\">\r\n                                                            <button type=\"button\" className=\"btn btn-outline-danger\" onClick={() => remove(index)}>\r\n                                                                Remove Status\r\n                                                            </button>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                ))}\r\n\r\n                                                <div className=\"mt-2\">\r\n                                                    <button type=\"button\" className=\"btn btn-outline-dark\"\r\n                                                            onClick={ () => push({excuse: \"\", duration: \"\", startDate: \"\",}) }\r\n                                                    >\r\n                                                        Add Additional Status\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </FieldArray>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                        \r\n                        <div className=\"form-row mt-3\">\r\n                            <div className=\"form-group col-12\">\r\n                                <label htmlFor=\"certNo\">MC Number</label>\r\n                                <Field name=\"certNo\" type=\"text\" className={`form-control ${errors.certNo && touched.certNo ? 'invalid-field' : 'valid-field'}`} />\r\n                                <ErrorMessage name=\"certNo\" component=\"div\" className=\"field-error mb-0\" />\r\n                                <small className=\"form-text text-muted mt-0\">\r\n                                    If you did not get any MC, put \"NIL\".\r\n                                </small>\r\n                            </div>\r\n\r\n                            <div className=\"form-group col-12\">\r\n                                <p className=\"mb-0\">Did you go through a swab test?</p>\r\n                                <label htmlFor='swabbed-yes' className=\"mb-0\">\r\n                                    <Field type=\"radio\" name=\"swabbed\" id=\"swabbed-yes\" value=\"Yes\" className=\"mr-1\"/>\r\n                                    Yes\r\n                                </label>\r\n                                <label htmlFor=\"swabbed-no\" className=\"mb-0 ml-3\">\r\n                                    <Field type=\"radio\" name=\"swabbed\" id=\"swabbed-no\" value=\"No\" className=\"mr-1\"/>\r\n                                    No\r\n                                </label>\r\n                                <ErrorMessage name=\"swabbed\" component=\"div\" className=\"field-error mb-0\" />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-row\">\r\n                            <p className=\"mb-0\">Your 2nd Message:</p>\r\n                            <Field id=\"second-message\" as=\"textarea\" readOnly className=\"form-control mb-2\" value={formatSecondMessage(values)} />\r\n                            <button onClick={() => {\r\n                                const element = document.getElementById(\"second-message\");\r\n                                element.select();\r\n                                document.execCommand(\"copy\");\r\n                            }} className=\"btn btn-dark\">\r\n                                Copy Message\r\n                            </button>\r\n                        </div>\r\n\r\n                    </Form>\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nReactDOM.render(\r\n    <FormPage />,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}